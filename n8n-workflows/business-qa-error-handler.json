{
  "name": "Business Q&A Error Handler",
  "description": "Error handling workflow for Business Q&A automation\nPurpose: Handle failures, log errors, and provide fallback responses\nOwners: m8s.ai development team\nTriggers: Errors from business-qa-workflow\nActions: Log error, notify team, send fallback response",
  "nodes": [
    {
      "parameters": {},
      "id": "error-trigger",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process error information\nconst errorData = $json;\nconst execution = $execution;\n\n// Extract useful error details\nconst errorMessage = errorData.error?.message || 'Unknown error';\nconst nodeName = errorData.node?.name || 'Unknown node';\nconst executionId = execution.id;\nconst workflowId = $workflow.id;\nconst timestamp = new Date().toISOString();\n\n// Try to extract session info from original payload\nlet sessionId = 'unknown';\nlet userMessage = 'unknown';\ntry {\n  const originalData = errorData.inputData?.[0]?.json;\n  sessionId = originalData?.sessionId || 'unknown';\n  userMessage = originalData?.userMessage || 'unknown';\n} catch (e) {\n  // Ignore extraction errors\n}\n\nreturn {\n  errorDetails: {\n    message: errorMessage,\n    nodeName,\n    executionId,\n    workflowId,\n    sessionId,\n    userMessage: userMessage.substring(0, 100), // Truncate for logs\n    timestamp,\n    stack: errorData.error?.stack?.substring(0, 500) // Truncate stack trace\n  },\n  alertLevel: 'error',\n  shouldNotifyTeam: true\n};"
      },
      "id": "error-processor",
      "name": "Process Error Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldNotifyTeam }}",
              "value2": true
            }
          ]
        }
      },
      "id": "notification-gate",
      "name": "Should Notify Team?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "{{ $vars.SLACK_ERROR_CHANNEL_ID }}",
          "mode": "name"
        },
        "text": "",
        "attachments": [
          {
            "color": "danger",
            "fields": {
              "item": [
                {
                  "short": true,
                  "title": "Workflow",
                  "value": "Business Q&A Bot"
                },
                {
                  "short": true,
                  "title": "Node",
                  "value": "{{ $json.errorDetails.nodeName }}"
                },
                {
                  "short": true,
                  "title": "Session ID",
                  "value": "{{ $json.errorDetails.sessionId }}"
                },
                {
                  "short": true,
                  "title": "Execution ID",
                  "value": "{{ $json.errorDetails.executionId }}"
                },
                {
                  "short": false,
                  "title": "Error Message",
                  "value": "{{ $json.errorDetails.message }}"
                },
                {
                  "short": false,
                  "title": "User Message",
                  "value": "{{ $json.errorDetails.userMessage }}"
                },
                {
                  "short": false,
                  "title": "Execution URL",
                  "value": "{{ $vars.N8N_BASE_URL }}/execution/{{ $json.errorDetails.executionId }}"
                }
              ]
            },
            "title": "ðŸš¨ Business Q&A Workflow Error",
            "text": "An error occurred in the Business Q&A workflow that requires attention."
          }
        ],
        "otherOptions": {}
      },
      "id": "slack-notification",
      "name": "Notify Team via Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [800, 200],
      "credentials": {
        "slackOAuth2Api": {
          "id": "{{ $vars.SLACK_CREDENTIAL_ID }}",
          "name": "Slack OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate fallback response for the user\nconst errorDetails = $json.errorDetails;\n\n// Determine appropriate fallback based on error type\nlet fallbackResponse;\n\nif (errorDetails.message.includes('OpenAI') || errorDetails.message.includes('API')) {\n  fallbackResponse = {\n    text: \"I'm experiencing some technical difficulties right now. Here's what I can tell you about m8s: We're an AI-powered development team with human architect oversight, specializing in business automation and enterprise systems. For immediate assistance, please contact our team directly.\",\n    suggestedQuestions: [\n      \"Contact your team directly\",\n      \"Tell me about your services\",\n      \"How does your process work?\",\n      \"Try asking a different question\"\n    ],\n    requiresTeamConsultation: true,\n    conversationPhase: 'error_fallback',\n    exchangeCount: 1,\n    shouldTransition: false\n  };\n} else {\n  fallbackResponse = {\n    text: \"I apologize, but I'm having trouble processing your request right now. Our AI-powered development team specializes in business automation and enterprise systems with human architect oversight. Please try rephrasing your question or contact our team for immediate assistance.\",\n    suggestedQuestions: [\n      \"Contact your team directly\",\n      \"Try a different question\",\n      \"Tell me about your development process\",\n      \"What services do you offer?\"\n    ],\n    requiresTeamConsultation: true,\n    conversationPhase: 'error_fallback',\n    exchangeCount: 1,\n    shouldTransition: false\n  };\n}\n\nreturn {\n  fallbackResponse,\n  errorLogged: true,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "fallback-generator",
      "name": "Generate Fallback Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json.fallbackResponse) }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Error-Handled",
                "value": "true"
              },
              {
                "name": "X-Fallback-Response",
                "value": "true"
              }
            ]
          }
        }
      },
      "id": "error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, 350]
    },
    {
      "parameters": {
        "jsCode": "// Log error details for monitoring\nconst errorDetails = $('error-processor').first().json.errorDetails;\n\nconsole.error('Business Q&A Error Log:', {\n  workflow: 'business-qa',\n  executionId: errorDetails.executionId,\n  sessionId: errorDetails.sessionId,\n  nodeName: errorDetails.nodeName,\n  errorMessage: errorDetails.message,\n  timestamp: errorDetails.timestamp,\n  userMessage: errorDetails.userMessage,\n  alertLevel: 'error'\n});\n\nreturn { \n  logged: true,\n  severity: 'error',\n  notificationSent: true\n};"
      },
      "id": "error-logger",
      "name": "Log Error Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1200, 350]
    }
  ],
  "connections": {
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Process Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error Details": {
      "main": [
        [
          {
            "node": "Should Notify Team?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Notify Team?": {
      "main": [
        [
          {
            "node": "Notify Team via Slack",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Fallback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Team via Slack": {
      "main": [
        [
          {
            "node": "Generate Fallback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Fallback Response": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Error Response": {
      "main": [
        [
          {
            "node": "Log Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "timezone": "UTC",
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [
    {
      "id": "error-handling",
      "name": "Error Handling"
    },
    {
      "id": "business-qa",
      "name": "Business Q&A"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "business-qa-error-handler",
  "versionId": "1"
}